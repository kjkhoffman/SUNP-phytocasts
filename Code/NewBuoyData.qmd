

```{r}
library(lubridate)
library(dplyr)
```


```{r}

download.file('https://raw.githubusercontent.com/FLARE-forecast/SUNP-data/sunp-buoy-data/CR6_SUNP_SUNP_buoy_wq.csv', 'sunp-wq.csv')
```

```{r}
sunpwaterheader<-read.csv("sunp-wq.csv", skip=1, as.is=T) #get header minus wonky Campbell rows
sunpwaterdata<-read.csv("sunp-wq.csv", skip=4, header=F) #get data minus wonky Campbell rows
head(sunpwaterdata)
names(sunpwaterdata)<-names(sunpwaterheader) #combine the names to deal with Campbell logger formatting

hot <- sunpwaterdata %>% 
  filter(wtr_surface > 27.6)
#Removes row if the TIMESTAMP column is blank
sunpwaterdata <- sunpwaterdata[complete.cases(sunpwaterdata$TIMESTAMP),]

#Removes row if the RECORD column has an NA or blank
sunpwaterdata=sunpwaterdata[!(is.na(sunpwaterdata$RECORD) | sunpwaterdata$RECORD==""), ]

#For the time sequence we can use the same as the FCR catwalk 
end.time1 <- with_tz(as.POSIXct(strptime(Sys.time(), format = "%Y-%m-%d %H")), tzone = "Etc/GMT+5") #gives us current time with rounded hours in EDT
start.time1 <- end.time1 - days(7) #to give us seven days of data for looking at changes
full_time1 <- as.data.frame(seq(start.time1, end.time1, by = "10 min")) #create sequence of dates from past 5 days to fill in data
colnames(full_time1)=c("TIMESTAMP") #make it a data frame to merge to make obs5 later

#obs5 <- array(NA,dim=c(length(full_time1),41)) #create array that will be filled in with 41 columns (the entire size of the array)
#cat_timechange=max(which(sunpwaterdata$TIMESTAMP=="2019-04-15 10:00:00"))
sunpwaterdata$TIMESTAMP<-as.POSIXct(strptime(sunpwaterdata$TIMESTAMP, "%Y-%m-%d %H:%M"), tz = "Etc/GMT+5") #get dates aligned
#sunpwaterdata$TIMESTAMP[c(1:cat_timechange-1)]<-with_tz(force_tz(sunpwaterdata$TIMESTAMP[c(1:cat_timechange-1)],"Etc/GMT+4"), "Etc/GMT+5") #pre time change data gets assigned proper timezone then corrected to GMT -5 to match the rest of the data set

if (length(na.omit(sunpwaterdata$TIMESTAMP[sunpwaterdata$TIMESTAMP>start.time1]))==0) { #if there is no data after start time, then a pdf will be made explaining this
  pdf(paste0("sunpWaterQualityDataFigures_", Sys.Date(), ".pdf"), width=8.5, height=11) #call PDF file
  plot(NA, xlim=c(0,5), ylim=c(0,5), bty='n',xaxt='n', yaxt='n', xlab='', ylab='') #creates empty plot
  mtext(paste("No data found between", start.time1, "and", end.time1, sep = " ")) #fills in text in top margin of plot
  dev.off() #file made!
} else {
}
  #I would end up with NAs for all of the data values
  #for(j in 5:39){
  #sunpwaterdata[,j]<-as.numeric(levels(sunpwaterdata[,j]))[sunpwaterdata[,j]]#need to set all columns to numeric values
  
  #}
  #for(i in 1:length(full_time1)){ #this loop looks for matching dates and extracts data from metdata file to obs array
  #index = which(sunpwaterdata$TIMESTAMP==full_time1[427])
  #if(length(index)>0){
  #obs5[n,] <- unlist(sunpwaterdata[index,c(1:41)])
  #}
  #}
  
  obs5 <- dplyr::left_join(full_time1,sunpwaterdata, keep = F)#merge the data frame to get the last 7 days
  # make everything numeric
  obs5[2:54] <- sapply(obs5[2:54],as.numeric)
  #obs5<-as.data.frame(obs5) #make into DF
  #obs5[,1] <- full_time1 #now have your array with a proper timedate stamp!
  #colnames(obs5)<-names(sunpwaterdata[index,c(1:41)]) #get column names 
  # }  moved to the end so the graphs are also in the else part of the statement
  
  ### If statement to change plots when plot is in the Harbor or out in the lake#####
  
  pdf(paste0("sunpWaterQualityDataFigures_", Sys.Date(), ".pdf"), width=8.5, height=11) #call PDF file
  par(mfrow=c(3,2))
  
  # If the EXO and the temp string is out of the water then the buoy must me in the Harbor
  
  # if(obs5[1000,"wtr_surface"]=="NaN" & obs5[1000, "EXO_wtr"]=="NaN" & obs5[800,"wtr_surface"]=="NaN" & obs5[800, "EXO_wtr"]=="NaN"){
  #   
  #   plot(obs5$TIMESTAMP,obs5$RECORD, main="Campbell Logger Record", xlab="Time", ylab="Number", type='l')
  #   plot(obs5$TIMESTAMP,obs5$BattV, main="Campbell Logger Battery", xlab="Time", ylab="Volts", type='l')
  #   #Going to add these back in when the EXos are in 
  #   #added y limits so the axises would show up when the are no data
  #   #plot(obs5$TIMESTAMP, obs5$Radio_bat, main = "Radio Battery", xlab = "Time", ylab = "Volts", type = "l", lwd = 1.5, ylim = c(10,16))
  #   
  #   
  #   plot(obs5$TIMESTAMP,obs5$doobs_mid, main="DO (mg/L) in Harbor", xlab="Time", ylab="mg/L", type='l', col="blue", lwd=1.5, ylim = c(min(obs5$doobs, obs5$doobs_1, na.rm = TRUE) - 1, max(obs5$doobs, obs5$doobs_1, na.rm = TRUE) + 1))
  #   
  #   plot(obs5$TIMESTAMP,obs5$dosat_mid, main="DO (% saturation) in Harbor", xlab="Time", ylab="% saturation", type='l', col="blue", lwd=1.5, ylim = c(min(obs5$dosat, obs5$dosat_1, na.rm = TRUE) - 5, max(obs5$dosat, obs5$dosat_1, na.rm = TRUE) + 5))
  #   
  #   plot(obs5$TIMESTAMP,obs5$dotemp_mid, main="Water Temperature in Harbor", xlab="Time", ylab="Temperature (Â°C)", type='l', col="red", lwd=1.5, ylim = c(min(obs5$dotemp, na.rm = TRUE) - 1, max(obs5$dotemp, na.rm = TRUE) + 1))
  #   
  #   dev.off() #file made!
  #   
  #   # Else the Buoy is out in the Lake and all the plots
  # }else{
    plot(obs5$TIMESTAMP,obs5$RECORD, main="Campbell Logger Record", xlab="Time", ylab="Number", type='l')
    plot(obs5$TIMESTAMP,obs5$BattV, main="Campbell Logger Battery", xlab="Time", ylab="Volts", type='l')
    #Going to add these back in when the EXos are in 
    #added y limits so the axises would show up when the are no data
    plot(obs5$TIMESTAMP,obs5$EXO_battery_shallow, main="EXO Battery", xlab="Time", ylab="Volts", type='l',lwd=1.5,  ylim=c(2,8)) # previously c(-0.5, 15)
    points(obs5$TIMESTAMP, obs5$EXO_battery_deep, col="red", lwd =1.5, type="l")
    legend("topleft", c("EXO Battery Shallow", "EXO Battery Deep"), text.col = c("black", "red"), x.intersp=0.001)
    #plot(obs5$TIMESTAMP, obs5$Radio_bat, main = "Radio Battery", xlab = "Time", ylab = "Volts", type = "l", lwd = 1.5, ylim = c(10,16))
    
    # wiper 
    plot(obs5$TIMESTAMP, obs5$EXO_wiper_shallow, main="EXO wiper voltage", xlab="Time", ylab="volts", type ="l")
    points(obs5$TIMESTAMP, obs5$EXO_wiper_deep, col="red", type="l")
    legend("topleft", c("EXO 1m", "EXO 8m"), text.col = c("black", "red"), x.intersp=0.001)
    
    
    plot(obs5$TIMESTAMP,obs5$EXO_cablepower_shallow, main="EXO Cable Power", xlab="Time", ylab="Volts", type='l',lwd=1.5, ylim=c(10,15))
    points(obs5$TIMESTAMP, obs5$EXO_cablepower_deep, col="red", type = "l", lwd =1.5)
    legend("topleft", c("EXO 1m", "EXO 8m"), text.col = c("black", "red"), x.intersp=0.001)
    
    plot(obs5$TIMESTAMP,obs5$EXO_depth_deep, main="Depth for Deep EXO", xlab="Time", ylab="Meters", type='l')
    
    #plot(obs5$TIMESTAMP,obs5$EXO_pressure_deep, main="Sonde Pressure for Deep EXO", xlab="Time", ylab="psi", type='l')
    
    # Temperature
    plot(obs5$TIMESTAMP,obs5$EXO_wtr_shallow, main="Water temp of sondes", xlab="Time", ylab="degrees C", type='l', col="medium sea green", lwd=1.5, ylim = c(min(obs5$EXO_wtr_deep,na.rm = TRUE) - 1, max(obs5$EXO_wtr_shallow,na.rm = TRUE) + 5))
    points(obs5$TIMESTAMP, obs5$dotemp_mid, col="black", type='l', lwd=1.5)
    points(obs5$TIMESTAMP, obs5$EXO_wtr_deep, col="magenta", type='l', lwd=1.5)
    points(obs5$TIMESTAMP, obs5$dotemp_deep, col="blue4", type='l', lwd=1.5)
    legend("topleft", c("1m EXO", "5m DO","8m EXO", "10m DO"), text.col=c("medium sea green", "black", "magenta","blue4"), x.intersp=0.001)
    
```

